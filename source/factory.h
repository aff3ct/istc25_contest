// This file is automatically generated by json_to_decoder.py
// K = 64, N = 80
#include "decoders/generated/Decoder_polar_SC_fast_sys_N80_K64.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N80_K64.hpp"

// K = 64, N = 128
#include "decoders/generated/Decoder_polar_SC_fast_sys_N128_K64.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N128_K64.hpp"

// K = 64, N = 256
#include "decoders/generated/Decoder_polar_SC_fast_sys_N256_K64.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N256_K64.hpp"

// K = 128, N = 160
#include "decoders/generated/Decoder_polar_SC_fast_sys_N160_K128.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N160_K128.hpp"

// K = 128, N = 256
#include "decoders/generated/Decoder_polar_SC_fast_sys_N256_K128.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N256_K128.hpp"

// K = 128, N = 512
#include "decoders/generated/Decoder_polar_SC_fast_sys_N512_K128.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N512_K128.hpp"

// K = 256, N = 320
#include "decoders/generated/Decoder_polar_SC_fast_sys_N320_K256.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N320_K256.hpp"

// K = 256, N = 512
#include "decoders/generated/Decoder_polar_SC_fast_sys_N512_K256.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N512_K256.hpp"

// K = 256, N = 1024
#include "decoders/generated/Decoder_polar_SC_fast_sys_N1024_K256.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N1024_K256.hpp"

// K = 512, N = 640
#include "decoders/generated/Decoder_polar_SC_fast_sys_N640_K512.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N640_K512.hpp"

// K = 512, N = 1024
#include "decoders/generated/Decoder_polar_SC_fast_sys_N1024_K512.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N1024_K512.hpp"

// K = 512, N = 2048
#include "decoders/generated/Decoder_polar_SC_fast_sys_N2048_K512.hpp"
#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N2048_K512.hpp"

class factory
{
    public:
        // Factory method to create a polar code instance
        static polar* create(int K, int N)
        {
            std::cout << "Creating polar code with K = " << K << " and N = " << N << std::endl;
            int N_polar = (int)std::exp2(std::ceil(std::log2(N)));
            if (K == 64 && N == 80)
            {
                int L = 32;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0x9B", 8);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N80_K64(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N80_K64(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_80_64,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 64 && N == 128)
            {
                int L = 32;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0x65", 7);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N128_K64(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N128_K64(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_128_64,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 64 && N == 256)
            {
                int L = 64;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0x385", 11);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N256_K64(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N256_K64(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_256_64,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 128 && N == 160)
            {
                int L = 32;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0x3D9", 10);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N160_K128(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N160_K128(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_160_128,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 128 && N == 256)
            {
                int L = 64;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0xF13", 12);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N256_K128(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N256_K128(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_256_128,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 128 && N == 512)
            {
                int L = 64;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0xF13", 12);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N512_K128(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N512_K128(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_512_128,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 256 && N == 320)
            {
                int L = 32;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0x3D9", 10);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N320_K256(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N320_K256(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_320_256,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 256 && N == 512)
            {
                int L = 64;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0xF13", 12);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N512_K256(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N512_K256(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_512_256,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 256 && N == 1024)
            {
                int L = 64;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0xF13", 12);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N1024_K256(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N1024_K256(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_1024_256,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 512 && N == 640)
            {
                int L = 32;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0xF13", 12);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N640_K512(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N640_K512(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_640_512,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 512 && N == 1024)
            {
                int L = 64;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0x8005", 16);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N1024_K512(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N1024_K512(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_1024_512,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            if (K == 512 && N == 2048)
            {
                int L = 32;
                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "0xF13", 12);
                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N2048_K512(K + crc->get_size(), N_polar, 1);
                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N2048_K512(K + crc->get_size(), N_polar, L, *crc, 1);
                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_2048_512,
                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);
            }
            else
                throw std::invalid_argument("Unsupported polar code parameters");
            }
};
