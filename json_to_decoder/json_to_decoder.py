import os
import json
import math
import argparse

# open all json files in the current directory
def load_json_files(directory):
    json_data = []
    for filename in os.listdir(directory):
        if filename.endswith('.json'):
            with open(os.path.join(directory, filename), 'r') as f:
                data = json.load(f)
                json_data.append(data)
    return json_data

# function of json data that opens a file and creates a frozen bits file
def create_frozen_bits_file(json_data):
    for data in json_data:
        filename = 'best_channels_K_' + str(data['K']) + '_N_' + str(data['N']) + '.pc'
        with open(filename, 'w') as f:

            # get the frozen bits from the json data
            frozen_bits = data['fb_1e-5']

            f.write(str(len(frozen_bits)) + '\n')
            f.write('awgn\n')
            f.write('0.1234\n')

            # write the frozen bits to the file
            fb = len(frozen_bits)-1
            ib = 0
            best_channels = []
            for i in range(len(frozen_bits)):
                if frozen_bits[i] == 0:
                    best_channels.append(i)
            for i in range(len(frozen_bits)):
                if frozen_bits[i] == 1:
                    best_channels.append(i)

            # write the frozen bits to the file
            for i in range(len(best_channels)):
                f.write(str(best_channels[i]) + ' ')

def main():
    # arg parse decoder gen path
    parser = argparse.ArgumentParser(description='Process JSON files to create decoder files.')
    parser.add_argument('--polar_gen_path', type=str, default='../../polar_decoder_gen/build/bin/polar_decoder_gen',
        help='Path to the polar generator directory.'
    )
    parser.add_argument('--json_path', type=str, default='.',
        help='Path to the directory containing JSON files.'
    )
    parser.add_argument('--source_path', type=str, default='../source/',
        help='Path to the source directory of istc contest.'
    )
    args = parser.parse_args()
    polar_gen_path = args.polar_gen_path


    json_path = args.json_path
    json_data = load_json_files(json_path)

    # sort json data by K and N
    json_data.sort(key=lambda x: (x['K'], x['N']))

    create_frozen_bits_file(json_data)

    # Generate decoder files using polar_decoder_gen
    for data in json_data:
        bc_filename = 'best_channels_K_' + str(data['K']) + '_N_' + str(data['N']) + '.pc'
        sc_dec_name = "Decoder_polar_SC_fast_sys_N" + str(data['N']) + "_K" + str(data['K'])
        sc_fbg_name =  "Decoder_polar_SC_fast_sys_fb_" + str(data['N']) + "_" + str(data['K'])
        scl_dec_name = "Decoder_polar_SCL_fast_CA_sys_N" + str(data['N']) + "_K" + str(data['K'])
        scl_fbg_name = "Decoder_polar_SCL_fast_CA_sys_fb_" + str(data['N']) + "_" + str(data['K'])

        K_plus_crc = data['K'] + data['crc_size']

        sc_cli = f"{polar_gen_path} --dec-type SC -N {data['N']} -K {K_plus_crc} --fbg-gen-method FILE --fbg-awgn-path {bc_filename} --dec-name {sc_dec_name} --fbg-name {sc_fbg_name}"
        scl_cli = f"{polar_gen_path} --dec-type SCL -N {data['N']} -K {K_plus_crc} --fbg-gen-method FILE --fbg-awgn-path {bc_filename} --dec-name {scl_dec_name} --fbg-name {scl_fbg_name}"

        os.system(sc_cli)
        os.system(scl_cli)

    # remove all files containing 'short' or 'dot' in the name
    for filename in os.listdir(json_path):
        if 'short' in filename or 'dot' in filename:
            os.remove(os.path.join(json_path, filename))

    # move all decoders file (starting with Decoder_polar) to the source.decoders.generated directory
    for filename in os.listdir(json_path):
        if filename.startswith('Decoder_polar'):
            os.rename(os.path.join(json_path, filename), os.path.join(args.source_path, 'decoders', 'generated', filename))

    # create factory file
    factory_file = os.path.join(args.source_path, 'factory.h')
    with open(factory_file, 'w') as f:
        f.write('// This file is automatically generated by json_to_decoder.py\n')
        for data in json_data:
            f.write('// K = ' + str(data['K']) + ', N = ' + str(data['N']) + '\n')
            f.write('#include "decoders/generated/Decoder_polar_SC_fast_sys_N' + str(data['N']) + '_K' + str(data['K']) + '.hpp"\n')
            f.write('#include "decoders/generated/Decoder_polar_SCL_fast_CA_sys_N' + str(data['N']) + '_K' + str(data['K']) + '.hpp"\n')
            f.write('\n')

        f.write('template <typename API_polar>\n')
        f.write('class factory\n')
        f.write('{\n')
        f.write('    public:\n')
        f.write('        // Factory method to create a polar code instance\n')
        f.write('        static polar* create(int K, int N)\n')
        f.write('        {\n')
        f.write('            std::cout << "Creating polar code with K = " << K << " and N = " << N << std::endl;\n')
        f.write('            int N_polar = (int)std::exp2(std::ceil(std::log2(N)));\n')

        for data in json_data:
            f.write('            if (K == ' + str(data['K']) + ' && N == ' + str(data['N']) + ')\n')
            f.write('            {\n')
            f.write('                int L = ' + str(data['L']) + ';\n')
            f.write('                aff3ct::module::CRC<int>* crc = new aff3ct::module::CRC<int>(K, "' + data['crc_poly'] + '", ' + str(data['crc_size']) + ');\n')
            f.write('                aff3ct::module::Decoder_polar_SC_fast_sys* decoder_SC = new aff3ct::module::Decoder_polar_SC_fast_sys_N' + str(data['N']) + '_K' + str(data['K']) + '<API_polar>(K + crc->get_size(), N_polar, 1);\n')
            f.write('                aff3ct::module::Decoder_polar_SCL_fast_CA_sys* decoder_CASCL = new aff3ct::module::Decoder_polar_SCL_fast_CA_sys_N' + str(data['N']) + '_K' + str(data['K']) + '<API_polar>(K + crc->get_size(), N_polar, L, *crc, 1);\n')
            f.write('                return new polar(K + crc->get_size(), N_polar, aff3ct::module::Decoder_polar_SCL_fast_CA_sys_fb_' + str(data['N']) + '_' + str(data['K']) + ',\n')
            f.write('                    new aff3ct::module::Decoder_polar_ASCL_fast_CA_sys(K + crc->get_size(), N_polar, *decoder_SC, *decoder_CASCL, *crc), crc);\n')
            f.write('            }\n')

        f.write ('            else\n')
        f.write('                throw std::invalid_argument("Unsupported polar code parameters");\n')
        f.write('            }\n')
        f.write('};\n')

    # create test_params files
    test_params_10_3_file = os.path.join(args.source_path, 'test_params_10-3.txt')

    with open(test_params_10_3_file, 'w') as f:
        for data in json_data:
            esn0dB_3 = data['EbN0_1e-3'] + 10 * math.log10(data['K'] / data['N'])
            esn0lin_3 = 10 ** (esn0dB_3 / 10)
            f.write(f'{data["K"]} {data["N"]} {esn0lin_3} 100000 1 \n')

    test_params_10_5_file = os.path.join(args.source_path, 'test_params_10-5.txt')

    with open(test_params_10_5_file, 'w') as f:
        for data in json_data:
            esn0dB_5 = data['EbN0_1e-5'] + 10 * math.log10(data['K'] / data['N'])
            esn0lin_5 = 10 ** (esn0dB_5 / 10)
            f.write(f'{data["K"]} {data["N"]} {esn0lin_5} 10000000 1 \n')

if __name__ == "__main__":
    main()
